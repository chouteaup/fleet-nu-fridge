#!/bin/bash
# Exploit (Universal Executor) Module - Development Manager
# Responsabilité locale pour le module Python Universal Executor

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[UniversalExecutor] ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}[UniversalExecutor] ✅ $1${NC}"
}

print_error() {
    echo -e "${RED}[UniversalExecutor] ❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}[UniversalExecutor] ⚠️  $1${NC}"
}

# Usage
usage() {
    echo "Universal Executor Module Development Manager"
    echo ""
    echo "Usage: $0 MODE CONFIG_FILE"
    echo ""
    echo "Modes:"
    echo "  dev  - Launch in development mode (Python debug)"
    echo "  run  - Launch from ACR image"
}

# Development mode
dev_mode() {
    local config_file="$1"

    print_info "Starting Universal Executor in development mode"

    # Change to universal_executor directory if it exists
    if [[ -d "universal_executor" ]]; then
        cd universal_executor
        print_info "Changed to universal_executor directory"
    fi

    # Check if Python is available
    if ! command -v python3 &> /dev/null; then
        print_error "python3 not found. Universal Executor requires Python 3.11+"
        exit 1
    fi

    # Check Python version
    local python_version=$(python3 --version | cut -d' ' -f2)
    print_info "Using Python $python_version"

    # Create virtual environment if it doesn't exist
    if [[ ! -d "venv" ]]; then
        print_info "Creating Python virtual environment..."
        python3 -m venv venv
        print_success "Virtual environment created"
    fi

    # Activate virtual environment
    source venv/bin/activate
    print_info "Virtual environment activated"

    # Install dependencies if requirements.txt exists
    if [[ -f "requirements.txt" ]]; then
        print_info "Installing Python dependencies..."
        if pip install -r requirements.txt; then
            print_success "Dependencies installed"
        else
            print_warning "Some dependencies may have failed to install"
        fi
    fi

    # Run the universal executor
    if [[ -f "src/universal_executor.py" ]]; then
        print_info "Starting Universal Executor in debug mode..."
        print_success "Universal Executor ready for Azure IoT Edge direct methods"

        print_info "Available Python scripts:"
        ls -1 python_scripts/*.py 2>/dev/null | while read script; do
            script_name=$(basename "$script" .py)
            echo "  📋 $script_name"
        done || print_warning "No python_scripts/ directory found"

        print_info "Available Bash scripts:"
        ls -1 scripts/*.sh 2>/dev/null | while read script; do
            script_name=$(basename "$script" .sh)
            echo "  🔧 $script_name"
        done || print_warning "No scripts/ directory found"

        print_info ""
        print_info "Universal Executor listening for Azure IoT Direct Methods:"
        print_info "  • execute_python - Run Python scripts"
        print_info "  • execute_shell - Run shell commands"
        print_info "  • execute_script - Run bash scripts"
        print_info "  • list_scripts - List available scripts"
        print_info "  • system_info - Get system information"

        # Execute main script with debug
        export PYTHONPATH="${PYTHONPATH:-}:$(pwd)/src"
        exec python3 src/universal_executor.py --debug
    else
        print_error "Universal Executor main file not found: src/universal_executor.py"
        print_info "Expected structure:"
        print_info "  src/universal_executor.py (main Azure IoT module)"
        print_info "  python_scripts/*.py (Python utilities)"
        print_info "  scripts/*.sh (Bash utilities)"
        exit 1
    fi
}

# Run mode
run_mode() {
    local config_file="$1"

    print_info "Starting Universal Executor in run mode (ACR image)"

    # Delegate to image manager
    local image_manager="../../image-manager.sh"

    if [[ ! -f "$image_manager" ]]; then
        print_error "Image manager not found: $image_manager"
        exit 1
    fi

    # Execute image manager
    "$image_manager" run "$config_file" UniversalExecutor
}

# Main execution
main() {
    if [[ $# -lt 2 ]]; then
        usage
        exit 1
    fi

    local mode="$1"
    local config_file="$2"

    # Validate config file
    if [[ ! -f "$config_file" ]]; then
        print_error "Configuration file not found: $config_file"
        exit 1
    fi

    case "$mode" in
        "dev")
            dev_mode "$config_file"
            ;;
        "run")
            run_mode "$config_file"
            ;;
        *)
            print_error "Unknown mode: $mode"
            usage
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"